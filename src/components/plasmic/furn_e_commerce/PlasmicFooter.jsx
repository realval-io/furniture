// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 8eQZy5xry36pEn1xTFSb3G
// Component: Gq5NoMrsOpL
import * as React from "react"
import { Link } from "gatsby"
import * as p from "@plasmicapp/react-web"
import {
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
} from "@plasmicapp/react-web"
import IconLink from "../../IconLink" // plasmic-import: DmqKQHoj3weO/component
import { useScreenVariants as useScreenVariantsn35PTdUkddpF } from "./PlasmicGlobalVariant__Screen" // plasmic-import: N35pTdUkddpF/globalVariant
import "@plasmicapp/react-web/lib/plasmic.css"
import * as plasmic_library_plasmic_color_type_css from "../library_plasmic_color_type/plasmic_library_plasmic_color_type.module.css" // plasmic-import: seaQhLVS4bbjiGvJJrRwyL/projectcss
import * as projectcss from "./plasmic_furn_e_commerce.module.css" // plasmic-import: 8eQZy5xry36pEn1xTFSb3G/projectcss
import * as sty from "./PlasmicFooter.module.css" // plasmic-import: Gq5NoMrsOpL/css
import LocationArrowIcon from "./icons/PlasmicIcon__LocationArrow" // plasmic-import: QYWWQ5Rd9_gw/icon
import FacebookIcon from "./icons/PlasmicIcon__Facebook" // plasmic-import: dKfJ_mayBn0o/icon
import InstagramIcon from "./icons/PlasmicIcon__Instagram" // plasmic-import: zQloGSZ8g4y6/icon
import LinkedinIcon from "./icons/PlasmicIcon__Linkedin" // plasmic-import: 39lYpig5NX3v/icon

export const PlasmicFooter__VariantProps = new Array()

export const PlasmicFooter__ArgProps = new Array()

function PlasmicFooter__RenderFunc(props) {
  const { variants, args, overrides, forNode } = props
  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsn35PTdUkddpF(),
  })

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_tokens,
        plasmic_library_plasmic_color_type_css.plasmic_tokens,
        sty.root
      )}
    >
      <p.Stack
        as={"div"}
        hasGap={true}
        className={classNames(projectcss.all, sty.freeBox__e7To6)}
      >
        <p.Stack
          as={"div"}
          hasGap={true}
          className={classNames(projectcss.all, sty.freeBox__wrk2Z)}
        >
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__k1GV
            )}
          >
            {"Information"}
          </div>

          <p.Stack
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox__bJ86X)}
          >
            <p.PlasmicLink
              className={classNames(
                projectcss.all,
                projectcss.a,
                projectcss.__wab_text,
                sty.link__hzLcY
              )}
              component={Link}
              href={"#"}
              platform={"gatsby"}
            >
              {"About Us"}
            </p.PlasmicLink>

            <p.PlasmicLink
              className={classNames(
                projectcss.all,
                projectcss.a,
                projectcss.__wab_text,
                sty.link__z0Jju
              )}
              component={Link}
              href={"#"}
              platform={"gatsby"}
            >
              {"Contact Us"}
            </p.PlasmicLink>

            <p.PlasmicLink
              className={classNames(
                projectcss.all,
                projectcss.a,
                projectcss.__wab_text,
                sty.link__doSm
              )}
              component={Link}
              href={"#"}
              platform={"gatsby"}
            >
              {"News"}
            </p.PlasmicLink>

            <p.PlasmicLink
              className={classNames(
                projectcss.all,
                projectcss.a,
                projectcss.__wab_text,
                sty.link__uihBz
              )}
              component={Link}
              href={"#"}
              platform={"gatsby"}
            >
              {"Store"}
            </p.PlasmicLink>
          </p.Stack>
        </p.Stack>

        <p.Stack
          as={"div"}
          hasGap={true}
          className={classNames(projectcss.all, sty.freeBox__spEbx)}
        >
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__lzCzU
            )}
          >
            {"Collections"}
          </div>

          <p.Stack
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox__r4Bbh)}
          >
            <p.PlasmicLink
              className={classNames(
                projectcss.all,
                projectcss.a,
                projectcss.__wab_text,
                sty.link___7ZX3J
              )}
              component={Link}
              href={"#"}
              platform={"gatsby"}
            >
              {"Wooden Chair"}
            </p.PlasmicLink>

            <p.PlasmicLink
              className={classNames(
                projectcss.all,
                projectcss.a,
                projectcss.__wab_text,
                sty.link__mw2Ni
              )}
              component={Link}
              href={"#"}
              platform={"gatsby"}
            >
              {"Royal Cloth Sofa"}
            </p.PlasmicLink>

            <p.PlasmicLink
              className={classNames(
                projectcss.all,
                projectcss.a,
                projectcss.__wab_text,
                sty.link__xmG0D
              )}
              component={Link}
              href={"#"}
              platform={"gatsby"}
            >
              {"Accent Chair"}
            </p.PlasmicLink>

            <p.PlasmicLink
              className={classNames(
                projectcss.all,
                projectcss.a,
                projectcss.__wab_text,
                sty.link___4BKpX
              )}
              component={Link}
              href={"#"}
              platform={"gatsby"}
            >
              {"Bed"}
            </p.PlasmicLink>

            <p.PlasmicLink
              className={classNames(
                projectcss.all,
                projectcss.a,
                projectcss.__wab_text,
                sty.link__hbF3
              )}
              component={Link}
              href={"#"}
              platform={"gatsby"}
            >
              {"Hanging Lamp"}
            </p.PlasmicLink>
          </p.Stack>
        </p.Stack>

        <p.Stack
          as={"div"}
          hasGap={true}
          className={classNames(projectcss.all, sty.freeBox__u9YA)}
        >
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__eafUt
            )}
          >
            {"My Accounts"}
          </div>

          <p.Stack
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox__cq0A0)}
          >
            <p.PlasmicLink
              className={classNames(
                projectcss.all,
                projectcss.a,
                projectcss.__wab_text,
                sty.link__l8JQl
              )}
              component={Link}
              href={"#"}
              platform={"gatsby"}
            >
              {"My Account"}
            </p.PlasmicLink>

            <p.PlasmicLink
              className={classNames(
                projectcss.all,
                projectcss.a,
                projectcss.__wab_text,
                sty.link__rz5ZQ
              )}
              component={Link}
              href={"#"}
              platform={"gatsby"}
            >
              {"Wishlist"}
            </p.PlasmicLink>

            <p.PlasmicLink
              className={classNames(
                projectcss.all,
                projectcss.a,
                projectcss.__wab_text,
                sty.link___4OCvi
              )}
              component={Link}
              href={"#"}
              platform={"gatsby"}
            >
              {"Community"}
            </p.PlasmicLink>

            <p.PlasmicLink
              className={classNames(
                projectcss.all,
                projectcss.a,
                projectcss.__wab_text,
                sty.link__nDl6I
              )}
              component={Link}
              href={"#"}
              platform={"gatsby"}
            >
              {"Order History"}
            </p.PlasmicLink>

            <p.PlasmicLink
              className={classNames(
                projectcss.all,
                projectcss.a,
                projectcss.__wab_text,
                sty.link__wEvzc
              )}
              component={Link}
              href={"#"}
              platform={"gatsby"}
            >
              {"My Cart"}
            </p.PlasmicLink>
          </p.Stack>
        </p.Stack>

        <p.Stack
          as={"div"}
          hasGap={true}
          className={classNames(projectcss.all, sty.freeBox___7VWy)}
        >
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__snIs
            )}
          >
            {"Newsletter"}
          </div>

          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__mtjae
            )}
          >
            {"Subscribe to get latest news, updates, and information"}
          </div>

          <div className={classNames(projectcss.all, sty.freeBox__bt7L)}>
            <input
              data-plasmic-name={"textInput"}
              data-plasmic-override={overrides.textInput ?? overrides.textbox}
              className={classNames(
                projectcss.all,
                projectcss.input,
                sty.textInput
              )}
              placeholder={"Enter Email Here..."}
              size={1}
              type={"text"}
              value={""}
            />

            <button
              data-plasmic-name={"button"}
              data-plasmic-override={overrides.button}
              className={classNames(
                projectcss.all,
                projectcss.button,
                sty.button
              )}
            >
              <LocationArrowIcon
                className={classNames(projectcss.all, sty.svg___8235)}
                role={"img"}
              />
            </button>
          </div>
        </p.Stack>
      </p.Stack>

      <p.Stack
        as={"div"}
        hasGap={true}
        className={classNames(projectcss.all, sty.freeBox__ryVjB)}
      >
        <p.Stack
          as={"div"}
          hasGap={true}
          className={classNames(projectcss.all, sty.freeBox__kOlXe)}
        >
          <IconLink
            className={classNames("__wab_instance", sty.iconLink__wyqxb)}
            icon={
              <FacebookIcon
                className={classNames(projectcss.all, sty.svg__e6JB)}
                role={"img"}
              />
            }
          />

          <IconLink
            className={classNames("__wab_instance", sty.iconLink__r5Ryq)}
            icon={
              <InstagramIcon
                className={classNames(projectcss.all, sty.svg___7GuPv)}
                role={"img"}
              />
            }
          />

          <IconLink
            className={classNames("__wab_instance", sty.iconLink__ldRSd)}
            icon={
              <LinkedinIcon
                className={classNames(projectcss.all, sty.svg__r77Ih)}
                role={"img"}
              />
            }
          />
        </p.Stack>

        <div className={classNames(projectcss.all, sty.freeBox__dL9U)}>
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text___8CJc
            )}
          >
            {"© Copyright. "}
          </div>

          <p.PlasmicLink
            className={classNames(
              projectcss.all,
              projectcss.a,
              projectcss.__wab_text,
              sty.link__oBktG
            )}
            component={Link}
            href={"https://www.plasmic.app/"}
            platform={"gatsby"}
          >
            {"Made by Plasmic. "}
          </p.PlasmicLink>

          <p.PlasmicLink
            className={classNames(
              projectcss.all,
              projectcss.a,
              projectcss.__wab_text,
              sty.link__rd29A
            )}
            component={Link}
            href={"https://www.themesine.com/"}
            platform={"gatsby"}
          >
            {"Inspired by Themesine."}
          </p.PlasmicLink>
        </div>
      </p.Stack>
    </div>
  )
}

const PlasmicDescendants = {
  root: ["root", "textInput", "textbox", "button"],
  textInput: ["textInput", "textbox"],
  button: ["button"],
}

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicFooter__ArgProps,
      internalVariantPropNames: PlasmicFooter__VariantProps,
    })

    return PlasmicFooter__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName,
    })
  }
  if (nodeName === "root") {
    func.displayName = "PlasmicFooter"
  } else {
    func.displayName = `PlasmicFooter.${nodeName}`
  }
  return func
}

export const PlasmicFooter = Object.assign(
  // Top-level PlasmicFooter renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    textInput: makeNodeComponent("textInput"),
    button: makeNodeComponent("button"),
    // Metadata about props expected for PlasmicFooter
    internalVariantProps: PlasmicFooter__VariantProps,
    internalArgProps: PlasmicFooter__ArgProps,
  }
)

export default PlasmicFooter
/* prettier-ignore-end */
