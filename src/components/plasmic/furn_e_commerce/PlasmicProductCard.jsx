// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 8eQZy5xry36pEn1xTFSb3G
// Component: _beqs1GTsSZ3
import * as React from "react"
import * as p from "@plasmicapp/react-web"
import {
  hasVariant,
  classNames,
  createPlasmicElementProxy,
  useTrigger,
  deriveRenderOpts,
} from "@plasmicapp/react-web"
import Ratings from "../../Ratings" // plasmic-import: 2n2-TSJJMMH_/component
import "@plasmicapp/react-web/lib/plasmic.css"
import * as plasmic_library_plasmic_color_type_css from "../library_plasmic_color_type/plasmic_library_plasmic_color_type.module.css" // plasmic-import: seaQhLVS4bbjiGvJJrRwyL/projectcss
import * as projectcss from "./plasmic_furn_e_commerce.module.css" // plasmic-import: 8eQZy5xry36pEn1xTFSb3G/projectcss
import * as sty from "./PlasmicProductCard.module.css" // plasmic-import: _beqs1GTsSZ3/css
import ShoppingCartIcon from "./icons/PlasmicIcon__ShoppingCart" // plasmic-import: rzAumREIqEkE/icon
import HeartOIcon from "./icons/PlasmicIcon__HeartO" // plasmic-import: xgeaGYcThLnE/icon
import ExpandIcon from "./icons/PlasmicIcon__Expand" // plasmic-import: GPp_tzClFyJ7/icon
import f1XxxOkRupOuqx from "./images/f1.jpeg" // plasmic-import: XXXOkRupOuqx/picture

export const PlasmicProductCard__VariantProps = new Array(
  "withReviews",
  "onSale"
)

export const PlasmicProductCard__ArgProps = new Array(
  "title",
  "price",
  "image",
  "ratings"
)

function PlasmicProductCard__RenderFunc(props) {
  const { variants, args, overrides, forNode } = props
  const [isRootHover, triggerRootHoverProps] = useTrigger("useHover", {})
  const triggers = {
    hover_root: isRootHover,
  }

  return (
    <p.Stack
      as={"div"}
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_tokens,
        plasmic_library_plasmic_color_type_css.plasmic_tokens,
        sty.root,
        {
          [sty.rootonSale]: hasVariant(variants, "onSale", "onSale"),
          [sty.rootwithReviews]: hasVariant(
            variants,
            "withReviews",
            "withReviews"
          ),
        }
      )}
      data-plasmic-trigger-props={[triggerRootHoverProps]}
    >
      <div className={classNames(projectcss.all, sty.freeBox__mypma)}>
        {p.renderPlasmicSlot({
          defaultContents: (
            <p.PlasmicImg
              alt={""}
              className={classNames(sty.img__d2KYd)}
              displayHeight={"auto"}
              displayMaxHeight={"none"}
              displayMaxWidth={"none"}
              displayMinHeight={"0"}
              displayMinWidth={"0"}
              displayWidth={"100%"}
              src={{
                src: f1XxxOkRupOuqx,
                fullWidth: 270,
                fullHeight: 310,
                aspectRatio: undefined,
              }}
            />
          ),

          value: args.image,
        })}

        {(hasVariant(variants, "onSale", "onSale") ? true : true) ? (
          <div
            className={classNames(projectcss.all, sty.freeBox__iQYan, {
              [sty.freeBoxonSale__iQYanI75PL]: hasVariant(
                variants,
                "onSale",
                "onSale"
              ),
            })}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__mcfr7
              )}
            >
              {"Sale"}
            </div>
          </div>
        ) : null}
        {(triggers.hover_root ? true : true) ? (
          <p.Stack
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox___8XWad)}
          >
            <ShoppingCartIcon
              className={classNames(projectcss.all, sty.svg__zh18O)}
              role={"img"}
            />

            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text___2EOw
              )}
            >
              {"Add to cart"}
            </div>

            <HeartOIcon
              className={classNames(projectcss.all, sty.svg__qfsRp)}
              role={"img"}
            />

            <ExpandIcon
              className={classNames(projectcss.all, sty.svg__gnJfE)}
              role={"img"}
            />
          </p.Stack>
        ) : null}
      </div>

      {(hasVariant(variants, "withReviews", "withReviews") ? true : true)
        ? p.renderPlasmicSlot({
            defaultContents: (
              <Ratings
                className={classNames("__wab_instance", sty.ratings__ln3LP)}
              />
            ),

            value: args.ratings,
          })
        : null}

      <p.Stack
        as={"div"}
        hasGap={true}
        className={classNames(projectcss.all, sty.freeBox__uwWdr)}
      >
        {p.renderPlasmicSlot({
          defaultContents: "Title",
          value: args.title,
          className: classNames(sty.slotTargetTitle),
        })}

        {p.renderPlasmicSlot({
          defaultContents: "$100",
          value: args.price,
          className: classNames(sty.slotTargetPrice),
        })}
      </p.Stack>
    </p.Stack>
  )
}

const PlasmicDescendants = {
  root: ["root"],
}

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicProductCard__ArgProps,
      internalVariantPropNames: PlasmicProductCard__VariantProps,
    })

    return PlasmicProductCard__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName,
    })
  }
  if (nodeName === "root") {
    func.displayName = "PlasmicProductCard"
  } else {
    func.displayName = `PlasmicProductCard.${nodeName}`
  }
  return func
}

export const PlasmicProductCard = Object.assign(
  // Top-level PlasmicProductCard renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    // Metadata about props expected for PlasmicProductCard
    internalVariantProps: PlasmicProductCard__VariantProps,
    internalArgProps: PlasmicProductCard__ArgProps,
  }
)

export default PlasmicProductCard
/* prettier-ignore-end */
